'use strict';

var _ = require('lodash');
var url = require('url');
var headerUtil = require('../utils/header-util');
var pathUtil = require('../utils/path-util');

var HEADERS_TO_REMOVE = ['connection',
  'keep-alive',
  'public',
  'proxy-authenticate',
  'transfer-encoding',
  'upgrade',
  'sec-websocket-key',
  'host'];

exports.getHeaders = function (req, accessToken, destination) {
  var headers;
  if (req) {
    headers = _.omit(req.headers, HEADERS_TO_REMOVE);
    accessToken = accessToken || (req.session && req.session.user && req.session.user.token &&
      req.session.user.token.accessToken);
    destination = destination || req.internalUrl.destination;

    addXForwardingHeaders(headers, req);
    removeSecurityHeaders(headers, req);
    headerUtil.updateSapPassport(headers);
  }

  return addOauthHeader(headers || {}, accessToken, destination);
};

function removeSecurityHeaders(headers, req) {
  if (!pathUtil.isPublicPath(req)) {
    delete headers['authorization'];
    if (pathUtil.isCsrfProtectionEnabled(req)) {
      delete headers['x-csrf-token'];
    }
  }
}

function addOauthHeader(headers, accessToken, destination) {
  if (accessToken && destination && !!destination.forwardAuthToken) {
    headers.authorization = 'Bearer ' + accessToken;
  }
  return headers;
}

function addXForwardingHeaders(headers, req) {
  if (req.headers.host) {
    headers['x-forwarded-host'] = req.headers.host;
  }
  if (!headers['x-forwarded-proto'] && req.protocol) {
    headers['x-forwarded-proto'] = req.protocol;
  }
  if (!headers['x-forwarded-for']) {
    headers['x-forwarded-for'] = req.connection.remoteAddress;
  }
  if (!headers['x-forwarded-path']) {
    headers['x-forwarded-path'] = url.parse(req.url).pathname;
  }
}
