'use strict';

var _ = require('lodash');
var logger = require('../utils/logger').getLogger('/Configuration');
var path = require('path');
var safeRegex = require('safe-regex');
var VError = require('verror').VError;
var xsenv = require('@sap/xsenv');
var configurationUtils = require('../utils/configuration-utils');
var validators = require('./validators');

exports.load = load;
exports.loadDestinations = loadDestinations;

function load(workingDir) {
  var filePath = path.join(workingDir, 'default-env.json');
  xsenv.loadEnv(filePath);

  var envConfig = {};
  envConfig.destinations = loadDestinations();
  envConfig.additionalHeaders = loadAdditionalHeaders();
  envConfig.plugins = loadPlugins(envConfig.destinations);
  envConfig.clickjackCheckWhitelist = loadClickjackWhitelist();
  envConfig.wsAllowedOrigins = loadWebSocketWhitelist();
  envConfig.secureSessionCookie = resolveSessionCookieSecureMode();

  var grouped = loadGroupedConfigurations();
  envConfig = _.merge(envConfig, grouped);

  return envConfig;
}

function loadDestinations(destinations) {
  destinations = destinations || loadJsonVar('destinations');
  if (!destinations) {
    logger.info('Using empty destinations to run');
    return {};
  }
  validators.validateEnvDestinations(destinations);
  applyDestinationDefaults(destinations);
  return _.keyBy(destinations, 'name');
}

function loadAdditionalHeaders() {
  var additionalHeaders = loadJsonVar('httpHeaders');
  if (!additionalHeaders) {
    return [];
  }
  validators.validateHeaders(additionalHeaders);
  additionalHeaders = _.map(additionalHeaders, function (header) {
    var normalizedHeader = {};
    _.forEach(header, function(value, key) {
      normalizedHeader[key.toLowerCase()] = value;
    });
    return normalizedHeader;
  });
  return additionalHeaders;
}

function loadPlugins(destinations) {
  var plugins = loadJsonVar('plugins');
  if (!plugins) {
    return null;
  }
  validators.validatePlugins(plugins, destinations);
  plugins.forEach(function (currentPlugin) {
    currentPlugin.source = configurationUtils.constructRegExp(currentPlugin.source);
  });
  return plugins;
}

function loadClickjackWhitelist() {
  return loadOriginsWhitelist('CJ_PROTECT_WHITELIST');
}

function loadWebSocketWhitelist() {
  return loadOriginsWhitelist('WS_ALLOWED_ORIGINS');
}

function loadOriginsWhitelist(envVar) {
  var whitelist = loadJsonVar(envVar);
  if (!whitelist) {
    return null;
  }
  validators.validateWhitelist(whitelist);
  whitelist.forEach(function (item) {
    if (typeof item.port === 'string') {
      item.port = parseInt(item.port);
    }
  });
  return whitelist;
}

function resolveSessionCookieSecureMode() {
  switch (process.env.SECURE_SESSION_COOKIE) {
  case 'true':
    return true;
  case 'false':
    return false;
  default:
    return 'auto';
  }
}

function loadGroupedConfigurations() {
  var grouped = {
    sessionTimeout: loadJsonVar('SESSION_TIMEOUT'),
    incomingConnectionTimeout: loadJsonVar('INCOMING_CONNECTION_TIMEOUT'),
    jwtRefresh: loadJsonVar('JWT_REFRESH'),
    tenantHostPattern: process.env['TENANT_HOST_PATTERN'],
    compression: loadJsonVar('COMPRESSION')
  };

  grouped = _.pickBy(grouped, function (value) {
    return (value || value === '' || value === 0);
  });

  if (!grouped.hasOwnProperty('jwtRefresh')) {
    grouped.jwtRefresh = 5; // 5 is the default JWT_REFRESH
  }
  var sendXFrameOptions = loadJsonVar('SEND_XFRAMEOPTIONS');
  grouped.sendXFrameOptions = (typeof sendXFrameOptions !== 'undefined') ? sendXFrameOptions : true;
  validators.validateEnvironmentSettings(grouped);

  if (grouped.tenantHostPattern) {
    grouped.tenantHostPattern = configurationUtils.constructRegExp(grouped.tenantHostPattern);
    if (!safeRegex(grouped.tenantHostPattern)) {
      logger.warning('TENANT_HOST_PATTERN is vulnerable to ReDoS attacks');
    }
  }
  return grouped;
}

function loadJsonVar(envVar) {
  if (envVar in process.env) {
    try {
      return JSON.parse(process.env[envVar]);
    } catch (e) {
      throw new VError(e, 'Invalid value for environment variable %s', envVar);
    }
  }
}

function applyDestinationDefaults(destinations) {
  destinations.forEach(function (dest) {
    _.defaults(dest, {
      timeout: 30000
    });
  });
}
