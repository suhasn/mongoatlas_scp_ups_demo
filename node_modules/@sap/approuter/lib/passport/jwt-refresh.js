'use strict';

var request = require('request');
var VError = require('verror').VError;

var requestTraceEnabled = require('../utils/trace-util').requestTraceEnabled;
var loggerUtils = require('../utils/logger');
var passportUtils = require('./utils');

var tracer = loggerUtils.getTracer();
var logger = loggerUtils.getLogger('/request/uaa');
var MAX_ATTEMPTS_NUMBER = 3;

module.exports = {
  executeAfter: function(fn, timeout) {
    setTimeout(fn, timeout);
  },

  refreshToken: function(app, session) {
    tracer.path('Entering refreshToken');

    var routerConfig = app.get('mainRouterConfig');
    var jwtRefresh = routerConfig.jwtRefresh;
    var tokenRefreshTimestamp = session.user.token.expiryDate - toMilliseconds(jwtRefresh);

    var msBeforeRefresh = tokenRefreshTimestamp - Date.now();
    if (msBeforeRefresh < 0) {
      return tracer.error('jwtRefresh is greater than the the token validity period!');
    }

    var memoryStore = app.get('memoryStore');
    memoryStore.getSessionTimeout(session.id, function(err, sessionTimeout) {
      if (err || Date.now() + toMilliseconds(sessionTimeout) < tokenRefreshTimestamp) {
        return err && tracer.debug(err);
      }

      memoryStore.update(session.id, function(newSession) {
        if (!newSession || newSession.jwtRefreshStarted) {
          return;
        }
        tracer.info('Updating jwtRefreshStarted to true for session %s.', newSession.id);
        newSession.jwtRefreshStarted = true;
        tracer.info('Refreshing jwt for session %s in %dms.', newSession.id, msBeforeRefresh);
        module.exports.executeAfter(function() {
          doRefresh(app, newSession);
        }, msBeforeRefresh);
      }, false);
    });
  }
};

function toMilliseconds(minutes) {
  return minutes * 60 * 1000;
}

function doRefresh(app, session) {
  var oauthOptions = session.user.token.oauthOptions;
  var requestOptions = {
    url: oauthOptions.tokenURL,
    auth: {
      user: oauthOptions.clientid,
      pass: oauthOptions.clientsecret
    },
    form: {
      'grant_type': 'refresh_token',
      'refresh_token': session.user.token.refreshToken
    }
  };

  doRefreshAttempt(requestOptions, app, session, 1);
}

function doRefreshAttempt(requestOptions, app, session, attemptNumber) {
  tracer.path('Entering doRefreshAttempt');
  var timeout = session.user.token.expiryDate - Date.now();
  if (timeout < 0) {
    return tracer.info('JWT for session %s could not be refreshed!', session.id);
  }
  requestOptions.timeout = timeout;
  callUaa(requestOptions, attemptNumber, function uaaResponse(err, uaaResponse) {
    if (err) {
      tracer.warning(err, 'Session %s', session.id);
      if (attemptNumber === MAX_ATTEMPTS_NUMBER) {
        return tracer.error('Unable to refresh the JWT for session %s, number of attempts done: %d', session.id, attemptNumber);
      }
      return doRefreshAttempt(requestOptions, app, session, attemptNumber + 1);
    }
    var updatedSession;
    app.get('memoryStore').update(session.id, function updateSession(newSession) {
      if (!newSession) {
        return;
      }
      var options = {
        accessToken: uaaResponse.access_token,
        expiresIn: uaaResponse.expires_in,
        refreshToken: uaaResponse.refresh_token,
        scope: uaaResponse.scope,
        oauthOptions: newSession.user.token.oauthOptions
      };
      newSession.user = passportUtils.getUserProperties(options);
      newSession.jwtRefreshStarted = false;
      updatedSession = newSession;
      tracer.info('Token refreshed!');
    }, false);
    updatedSession && module.exports.refreshToken(app, updatedSession); // schedule next refresh if needed
  });
}

function callUaa(requestOptions, attemptNumber, cb) {
  var requestStart = Date.now();
  request.post(requestOptions, function onResponse(err, res, body) {
    if (requestTraceEnabled) {
      if (err) {
        logger.info(err, 'Request to UAA at %s for JWT refresh failed in %d ms.', requestOptions.url, Date.now() - requestStart);
      } else {
        logger.info('Request to UAA at %s for JWT refresh took %d ms to respond with status code %d', requestOptions.url, Date.now() - requestStart, res.statusCode);
      }
    }
    if (err) {
      return cb(new VError(err, 'Attempt %d of jwt refresh failed', attemptNumber));
    }
    if (res.statusCode !== 200) {
      return cb(new VError('Attempt %d of jwt refresh failed. Status code: %d, response body: "%s"', attemptNumber, res.statusCode, body));
    }
    try {
      var responseJSON = JSON.parse(body);
    } catch (err) {
      return cb(new VError(err, 'Bad response from UAA when refreshing JWT - not a JSON'));
    }
    if (!responseJSON.access_token || !responseJSON.expires_in || !responseJSON.refresh_token) {
      return cb(new Error('Bad response from UAA when refreshing JWT - not all JWT fields are present'));
    }

    cb(null, responseJSON);
  });
}
