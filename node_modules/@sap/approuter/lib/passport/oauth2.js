'use strict';

var _ = require('lodash');
var assert = require('assert');
var querystring = require('querystring');
var request = require('request');
var VError = require('verror').VError;
var traceUtils = require('../utils/trace-util');
var requestTraceEnabled = traceUtils.requestTraceEnabled;

module.exports.OAuth2 = OAuth2;

function OAuth2(options) {
  ['clientid', 'clientsecret', 'tokenURL'].forEach(function (element) {
    assert(options[element], 'OAuth2 requires "' + element + '" option');
  });
  this._options = _.clone(options);
}

OAuth2.prototype.getCodeAuthorizationUrl = function (authorizationURL, callbackURL) {
  return authorizationURL + '?' + querystring.stringify({
    'response_type': 'code',
    'client_id': this._options.clientid,
    'redirect_uri': callbackURL
  });
};

OAuth2.prototype.getOAuthAccessToken = function (params, loggingContext, callback) {
  var tokenURL = this._options.tokenURL;
  var tracer = loggingContext.getTracer();
  if (tracer.isEnabled('debug')) {
    tracer.debug('requesting UAA at %s: parameters %s', tokenURL, traceUtils.stringifyQueryParameters(params));
  }
  var requestStart = Date.now();
  request.post({
    headers: this._options.customHeaders,
    url: tokenURL
  }, function (err, response, body) {
    if (requestTraceEnabled) {
      var logger = loggingContext.getLogger('/request/uaa');
      if (err) {
        logger.info(err, 'Request to UAA at %s failed in %d ms', tokenURL, Date.now() - requestStart);
      } else {
        logger.info('Request to UAA at %s took %d ms to respond with status code %d', tokenURL, Date.now() - requestStart, response.statusCode);
      }
    }
    if (err) {
      return callback(new VError(err, 'request to UAA at %s failed', tokenURL));
    }
    if (response.statusCode !== 200) {
      var error = new VError('unexpected response from UAA at %s: status code: %d, response body: "%s"',
        tokenURL, response.statusCode, body);
      error.status = response.statusCode;
      return callback(error);
    }
    var result;
    try {
      result = JSON.parse(body);
    } catch (e) {
      return callback(new VError(e, 'unexpected response from UAA at %s. Expected json, got: "%s"', tokenURL, body));
    }
    callback(null, result);
  }).auth(this._options.clientid, this._options.clientsecret).form(params);
};
