'use strict';

var jwtDecode = require('jwt-decode');
var VError = require('verror').VError;
var headerUtil = require('../utils/header-util');
var urlUtils = require('../utils/url-utils');
var uaaUtils = require('../utils/uaa-utils');

module.exports = {
  storeToken: function(req, options, done) {
    req.session.regenerate(function(err) {
      if (err) { return done(err); }

      req.session.user = module.exports.getUserProperties(options);
      req.session.save();
      done(null, req.session.user);
    });
  },

  getUserProperties: function(options) {
    var userName = jwtDecode(options.accessToken).user_name;
    return {
      id: userName,
      name: userName || 'n/a', // 'n/a' is for passport
      token: {
        accessToken: options.accessToken,
        expiryDate: module.exports.getExpiresAt(options.expiresIn).getTime(),
        refreshToken: options.refreshToken,
        oauthOptions: options.oauthOptions
      },
      scopes: options.scope ? options.scope.trim().split(' ') : []
    };
  },

  getExpiresAt: function(duration) {
    // respect network latency if possible
    var expiresIn;
    if (duration > 180) {
      expiresIn = duration - 120;
    } else {
      expiresIn = duration;
    }
    return new Date(new Date().getTime() + expiresIn * 1000);
  },

  getCallBackUrl: function(req) {
    var appRouterUrl = urlUtils.buildAppRouterUrl(req);
    var loginCallback = req.routerConfig.appConfig.login.callbackEndpoint;
    return urlUtils.join(appRouterUrl, loginCallback);
  },

  loadOauthOptions: function(req, cb) {
    uaaUtils.getUaaConfig(req, function (err, uaaOptions) {
      if (err) { return cb(err); }

      var uaaUrl = uaaOptions.url;
      var options = {
        authorizationURL: urlUtils.join(uaaUrl, '/oauth/authorize'),
        tokenURL: urlUtils.join(uaaUrl, '/oauth/token'),
        clientid: uaaOptions.clientid,
        clientsecret: uaaOptions.clientsecret,
        url: uaaUrl,
        callbackURL: module.exports.getCallBackUrl(req),
        customHeaders: {}
      };

      headerUtil.updateSapPassport(req.headers, options.customHeaders);
      cb(null, options);
    });
  },

  getAccessTokenCallback: function (strategy, req) {
    return function accessTokenCallback(err, result) {
      if (err) {
        var error = new VError(err, 'Could not obtain access token');
        error.status = err.status;
        return strategy.error(error);
      }
      function verified(err, user, info) {
        if (err) { return strategy.error(err); }
        if (!user) { return strategy.fail(info); }
        strategy.success(user, info);
      }
      try {
        strategy.verify(req, result, verified);
      } catch (ex) {
        return strategy.error(ex);
      }
    };
  }
};
