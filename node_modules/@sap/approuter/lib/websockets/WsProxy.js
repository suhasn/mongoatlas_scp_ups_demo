'use strict';

var http = require('http');
var util = require('util');
var ws = require('ws');
var ConnectionHandler = require('./ConnectionHandler');
var loggerUtil = require('../utils/logger');
var connectUtils = require('../connect/utils');
var urlUtils = require('../utils/url-utils');
var whitilistUtils = require('../utils/whitelist-utils');
var attachRouterConfig = require('../middleware/attach-router-config');

module.exports = WsProxy;

function WsProxy(app) {
  this._app = app;
  this._server = null;
}

WsProxy.prototype.close = function (callback) {
  if (this._server) {
    this._server.close(callback);
  } else {
    process.nextTick(callback);
  }
};

WsProxy.prototype.listen = function(httpServer) {
  if (this._server) {
    throw new Error('Websocket server already running!');
  }

  this._server = new ws.Server({
    server: httpServer,
    verifyClient: verifyClient.bind(null, this._app)
  });
  this._server.on('connection', function serverConnection(incoming) {
    var handler = new ConnectionHandler(incoming.upgradeReq.loggingContext);
    handler.createConnection(incoming);
  });
};

function verifyClient(app, info, cb) {
  var req = info.req;
  connectUtils.setPropertiesToRequest(req, app);
  req.loggingContext = loggerUtil.createRequestContext(req);
  var tracer = req.loggingContext.getTracer();
  tracer.debug('[websockets] incoming request url: %s', req.url);
  attachRouterConfig(req, null, function (err) {
    if (err) {
      tracer.error(err);
      return cb(false, 500, getErrorMessage(500, err.message, tracer));
    }
    if (!req.routerConfig.appConfig.websockets.enabled) {
      return cb(false, 403, getErrorMessage(403, 'websockets are disabled', tracer));
    }
    var wsAllowedOrigins = req.routerConfig.wsAllowedOrigins || getDefaultAllowedOrigin(req, tracer);
    if (info.origin && whitilistUtils.matchWhitelist(wsAllowedOrigins, info.origin)) {
      return cb(true);
    }
    var message = info.origin ? util.format("origin '%s' is not allowed", info.origin) : 'missing origin header';
    cb(false, 403, getErrorMessage(403, message, tracer));
  });
}

function getDefaultAllowedOrigin(req, tracer) {
  var appRouterUrl = urlUtils.parse(urlUtils.buildAppRouterUrl(req));
  var wsAllowedOrigin = [{
    protocol: appRouterUrl.protocol.slice(0, -1),
    host: appRouterUrl.hostname,
    port: appRouterUrl.port
  }];
  tracer.debug('[websockets] using default allowed origin:', wsAllowedOrigin);
  return wsAllowedOrigin;
}

function getErrorMessage(status, message, tracer) {
  tracer.debug('[websockets] %s', message);
  return process.env.NODE_ENV === 'development' ? message : http.STATUS_CODES[status];
}
