'use strict';

var path = require('path');
var util = require('util');
var common = require('./common');
var callsite = require('callsite');
var constants = require('../constants');


module.exports = Tracer;

function Tracer(reqContext) {
  this._reqContext = reqContext;
  this._winston = reqContext._appContext._winstonTracer;
  this._mainTransportName = constants.TRANSPORT_NAMES.TRACER;
}

Tracer.prototype.getLevel = function () {
  var levelsContainer = this._reqContext._appContext._levelsContainer;
  return levelsContainer.getTracerLevel(extractFileName(callsite()[1]));
};

Tracer.prototype.entering = function () {
  var callStackElement = callsite()[1];
  var message = 'Entering function "' + constructFunctionName(callStackElement) + '"';
  if (arguments.length > 1) {
    message += ' with arguments: ';
    message += Array.prototype.slice.call(arguments).map(util.inspect).join(', ');
  }
  this._traceEntry('path', [message], callStackElement);
};

Tracer.prototype.exiting = function () {
  var callStackElement = callsite()[1];
  var message = 'Exiting function "' + constructFunctionName(callStackElement) + '"';
  if (arguments[0]) {
    message += ' with result: ' + util.inspect(arguments[0]);
  }
  this._traceEntry('path', [message], callStackElement);
};

Tracer.prototype.throwing = function (error) {
  var callStackElement = callsite()[1];
  var message = 'Function "' + constructFunctionName(callStackElement) + '" throwing';
  this._traceEntry('path', error ? [error, message] : [message], callStackElement);
};

Tracer.prototype.catching = function (error) {
  var callStackElement = callsite()[1];
  var message = 'Function "' + constructFunctionName(callStackElement) + '" catching';
  this._traceEntry('path', error ? [error, message] : [message], callStackElement);
};

Tracer.prototype._traceEntry = function (levelName, arrArgs, callStackElement) {
  var levelsContainer = this._reqContext._appContext._levelsContainer;
  var fileName = extractFileName(callStackElement);
  this._winston.transports[this._mainTransportName].level = levelsContainer.getTracerLevel(fileName);
  outputTraceEntry(this, levelName, arrArgs, fileName, callStackElement.getLineNumber());
};

Tracer.prototype._traceLogEntry = function (levelName, arrArgs, callStackElement) {
  this._winston.transports[this._mainTransportName].level = levelName;
  outputTraceEntry(this, levelName, arrArgs, extractFileName(callStackElement), callStackElement.getLineNumber());
};

function outputTraceEntry(tracer, levelName, arrArgs, fileName, lineNumber) {
  var error;
  arrArgs = arrArgs.slice(); // do not modify the original
  if (common.isError(arrArgs[0])) {
    error = arrArgs.shift();
  }
  var message = common.createMessage(arrArgs);
  var meta = {
    messageContext: {
      reqContext: tracer._reqContext._shorten(),
      location: fileName + ':' + lineNumber,
      error: error
    }
  };
  tracer._winston[levelName](message, meta);
}

function addFunctionForEveryLevel(proto, availableLevels) {
  Object.keys(availableLevels).forEach(function (levelName) {
    proto[levelName] = function () {
      if (common.isGloballyDisabled()) {
        return;
      }
      var arrArgs = Array.prototype.slice.call(arguments);
      var callStackElement = callsite()[1];
      this._traceEntry(levelName, arrArgs, callStackElement);
    };
  }, this);
}

addFunctionForEveryLevel(Tracer.prototype, constants.TRACE_LEVELS);

Tracer.prototype.isEnabled = function (level) {
  var levelsContainer = this._reqContext._appContext._levelsContainer;
  var fileName = extractFileName(callsite()[1]);
  var currentLevel = levelsContainer.getTracerLevel(fileName);
  return common.genericIsEnabled(level, constants.TRACE_LEVELS, currentLevel);
};

function extractFileName(callStackElement) {
  var fullFileName = callStackElement.getFileName();
  var shortFileName = fullFileName.replace(process.env.HOME, '');
  if (path.sep === '\\') {
    return shortFileName.replace(/\\/g, '/');
  }
  return shortFileName;
}

function constructFunctionName(callStackElement) {
  return callStackElement.getFunctionName() || '<anonymous>';
}
